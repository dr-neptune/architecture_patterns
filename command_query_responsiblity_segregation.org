#+TITLE: Command-Query Responsibility Segregation (CQRS)

Reads (queries) and writes (commands) are different, so they should be treated differently (or have their responsibilities segregated).

For the write side, our domain architectural patterns help us evolve our system over time, but the complexity we've built so far doesn't buy anything for reading data.

* Post/Redirect/Get and Command Query Segregation

With Command-Query Separation we follow one simple rule:
Functions should either modify state or answer questions, but never both.

Previously we introduced an allocate endpoint that returns a 200 OK and a batch ID. We'll change it to return a simple OK message and instead provide a new read-only endpoint to retrieve allocation state:

#+BEGIN_SRC python
@pytest.mark.usefixtures('postgres_db')
@pytest.mark.usefixtures('restart_api')

def test_happy_path_returns_202_and_batch_is_allocated():
    orderid = random_orderid()
    sku, othersku = random_sku(), random_sku("other")
    earlybatch, laterbatch, otherbatch = random_batchref(1), random_batchref(2), random_batchref(3)
    api_client.post_to_add_batch(laterbatch, sku, 100, "2011-01-02")
    api_client.post_to_add_batch(earlybatch, sku, 100, "2011-01-01")
    api_client.post_to_add_batch(otherbatch, othersku, 100, None)

    r = api_client.post_to_allocate(orderid, sku, qty=3)
    assert r.status_code == 202

    r = api_client.get_allocation(orderid)
    assert r.ok
    assert r.json() == [
        {"sku": sku, "batchref": earlybatch}
    ]

@pytest.mark.usefixtures("postgres_db")
@pytest.mark.usefixtures("restart_api")
def test_unhappy_path_returns_400_and_error_message():
    unknown_sku, orderid = random_sku(), random_orderid()
    r = api_client.post_to_allocate(
        orderid, unknown_sku, qty=20, expect_success=False
    )
    assert r.status_code == 400
    assert r.json()["message"] == f"Invalid sku {unknown_sku}"

    r = api_client.get_allocation(orderid)
    assert r.status_code == 404
#+END_SRC

and our Flask app update:

#+BEGIN_SRC python
from allocation import views

# ...

@app.route("/allocations/<orderid>", methods=["GET"])
def allocations_view_endpoint(orderid):
    uow = unit_of_work.SqlAlchemyUnitOfWork()
    result = views.allocations(orderid, uow)
    if not result:
        return "not found", 404
    return jsonify(result), 200
#+END_SRC

* Hold On to your Lunch, Folks

We can probably just add a list method to our existing repository object

#+BEGIN_SRC python
from allocation.service_layer import unit_of_work

def allocations(orderid: str, uow: unit_of_work.SqlAlchemyUnitOfWork):
    with uow:
        results = uow.session.execute(
            """
            SELECT ol.sku, b.reference
            FROM allocations AS a
            JOIN batches AS b ON a.batch_id = b.id
            JOIN order_lines AS ol ON a.orderline_id = ol.id
            WHERE ol.orderid = :orderid
            """,
            dict(orderid=orderid)
        )
    return [{"sku": sku, "batchref": batchref} for sku, batchref in results]
#+END_SRC

* Testing CQRS Views

Whatever approach we go for, we'll probably need at least one integration test.

#+BEGIN_SRC python
def test_allocations_view(sqlite_session_factory):
    uow = unit_of_work.SqlAlchemyUnitOfWork(sqlite_session_factory)

    # use the public entrypoint to our application, the messagebus
    messagebus.handle(commands.CreateBatch("sku1batch", "sku1", 50, None), uow)
    messagebus.handle(commands.CreateBatch("sku2batch", "sku2", 50, today), uow)
    messagebus.handle(commands.Allocate("order1", "sku1", 20), uow)
    messagebus.handle(commands.Allocate("order1", "sku2", 20), uow)

    # add a spurious batch in order to make sure we're getting the right ones
    messagebus.handle(commands.CreateBatch("sku1batch-later", "sku1", 50, today), uow)
    messagebus.handle(commands.Allocate("otherorder", "sku1", 30), uow)
    messagebus.handle(commands.Allocate("otherorder", "sku2", 10), uow)

    assert views.allocations("order1", uow) == [
        {"sku": "sku1", "batchref": "sku1batch"},
        {"sku": "sku2", "batchref": "sku2batch"}
    ]
#+END_SRC

* Obvious Alternative 1: Using the Existing Repository

How about adding a helper method to our products repository?

#+BEGIN_SRC python :tangle views.py
from allocation import unit_of_work

def allocations(orderid: str, uow: unit_of_work.AbstractUnitOfWork):
    with uow:
        products = uow.products.for_order(orderid=orderid)  # 1
        batches = [b for p in products for b in p.batches]  # 2
        return [
            {'sku': b.sku, 'batchref': b.reference}
            for b in batches
            if orderid in b.orderids  # 3
        ]
#+END_SRC

1. Our repository returns Product objects, and we need to find all the products for the SKUs in a given order, so we'll build a new helper method called .for_order() on the repository
2. Now we have products but we actually want batch references, so we get all the possible batches with a list comprehension
3. We filter again to get just the batches for our specific order. That, in turn, relies on our Batch objects being able to tell us which order IDs it has allocated

#+BEGIN_SRC python :tangle model.py
class Batch:
    # ...
    @property
    def orderids(self):
        return {l.orderid for l in self._allocations}
#+END_SRC

* Obvious Alternative 2: Using the ORM

#+BEGIN_SRC python :tangle views.py
from allocation import unit_of_work, model

def allocations():
    with uow:
        batches = uow.session.query(model.Batch).join(
            model.OrderLine, model.Batch._allocations
        ).filter(
            model.OrderLine.orderid == orderid
        )

        return [
            {"sku": b.sku, "batchref": b.batchref}
            for b in batches
        ]
#+END_SRC

* Time to Completely Jump the Shark

First, a nicer SQL query:

#+BEGIN_SRC python
def allocations(orderid: str, uow: unit_of_work.SqlAlchemyUnitOfWork):
    with uow:
        results = uow.session.execute(
            """
            SELECT sku, batchref FROM allocations_view WHERE orderid = :orderid
            """,
            dict(orderid=orderid)
        )
#+END_SRC

by keeping a totally separate, denormalized data store for our view model

#+BEGIN_SRC python :tangle orm.py
allocations_view = Table(
    "allocations_view",
    metadata,
    Column("orderid", String(255)),
    Column("sku", String(255)),
    Column("batchref", String(255))
)
#+END_SRC

Building a denormalized copy of your data that's optimized for read operations isn't uncommon, once you've reached the limits of what you can do with indexes.

More than raw speed, this approach buys us scale. When we're _reading_ data, there is no limit to the number of clients that can concurrently execute. For this reason, read-only stores can be horizontally scaled out.

Keeping the read model up to date is the challenge! Database views (materialized or otherwise) and triggers are a common solution, but that limits us to our database.

Instead, we'd like to look at how to reuse event-driven architecture instead

* Updating a Read Model Table Using an Event Handler

We add a second handler to the Allocated event:

#+BEGIN_SRC python :tangle messagebus.py
EVENT_HANDLERS = {
    events.Allocated: [
        handlers.publish_allocated_event,
        handlers.add_allocation_to_read_model,
    ],
    events.Deallocated: [
        handlers.remove_allocation_from_read_model,
        handlers.reallocate
    ]
}
#+END_SRC

Then we change our update-view-model code:

#+BEGIN_SRC python :tangle handlers.py
def add_allocation_to_read_model(
        event: events.Allocated,
        uow: unit_of_work.SqlAlchemyUnitOfWork
):
    with uow:
        uow.session_execute(
            """
            INSERT INTO allocations_view (orderid, sku, batchref)
            VALUES (:orderid, :sku, :batchref)
            """,
            dict(orderid=event.orderid,
                 sku=event.sku,
                 batchref=event.batchref)
        )
        uow.commit()

def remove_allocation_from_read_model(
        event: events.Deallocated,
        uow: unit_of_work.SqlAlchemyUnitOfWork
):
    with uow:
        uow.session.execute(
            """
            DELETE FROM allocations_view
            WHERE orderid = :orderid AND sku = :sku
            """,
            dict(orderid=event.orderid,
                 sku=event.sku)
        )
        uow.commit()
#+END_SRC
