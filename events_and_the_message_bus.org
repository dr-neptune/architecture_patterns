#+TITLE: Events and the Message Bus

It's not the obvious features that make a mess of our codebase: it's the goop around the edge. It's reporting, and permissions, and workflows that touch a zillion objects.

We'll start by doing the simplest, most expeditious thing, and talk about why this leads to a big ball of mud.
Then we'll show how to use the *Domain Events* pattern to separate side effects from our use cases, and how to use a simple *Message Bus* pattern
for triggering behavior based on those events.

* Single Responsibility Principle

Trying to stick email functionality in our (domain, service layer, web controller) layer is a violation of the *single responsibility principle*.

: Rule of thumb: if you can't describe what your function does without using words like "then" or "and" you might be violating the SRP

To solve the problem, we're going to split the orchestration into separate steps so that the different concerns don't get tangled up.

* All Aboard the Message Bus!

The patterns we will look at are Domain Events and the Message Bus.

Instead of being concerned about emails, our model will be in charge of recording events. We'll use a message bus to respond to events and invoke a new operation.

* Events are Simple Dataclasses

An event is a kind of value object. Events don't have any behavior, because they're pure data structures.

#+BEGIN_SRC python :tangle events.py
from dataclasses import dataclass

class Event:  # 1
    pass

@dataclass
class OutOfStock(Event):  # 2
    sku: str
#+END_SRC

1. Once we have a number of events, we'll find it useful to have a parent class that can store common attributes. It's also useful for type hints in our message bus
2. dataclasses are great for domain events too

* The Model Raises Events

When our domain model records a fact that happened, we say it raises an event

#+BEGIN_SRC python
def test_records_out_of_stock_event_if_cannot_allocate():
    batch = Batch("batch1", "SMALL-FORK", 10, eta=today)
    product = Product(sku="SMALL-FORK", batches=[batch])
    product.allocate(OrderLine("order1", "SMALL-FORK", 10))

    allocation = product.allocate(OrderLine("order2", "SMALL-FORK", 1))
    assert product.events[-1] == events.OutOfStock(sku="SMALL-FORK")  # 1
    assert allocation is None
#+END_SRC

1. Our aggregate will expose a new attribute called .events that will contain a list of facts about what has happened, in the form of Event objects

Here's what the model looks like on the inside:

#+BEGIN_SRC python
class Product:
    def __init__(self, sku: str, batches: List[Batch], version_number: int = 0):
        self.sku = sku
        self.batches = batches
        self.version_number = version_number
        self.events = []  # type: List[events.Event]  # 1

    def allocate(self, line: OrderLine) -> str:
        try:
            # ...
            except StopIteration:
                self.events.append(events.OutOfStock(line.sku))  # 2
                # raises OutOfStock(f"Out of stock for sku {line.sku}")  # 3
                return None
#+END_SRC

1. Here is our new .events attribute in use
2. Rather than invoking some email sending code directly, we record those events at the place they occur, using only the language of the domain
3. We're also going to stop raising an exception for the out-of-stock case. The event will do the job the exception was doing.

* The Message Bus Maps Events to Handlers

A message bus basically says, "When I see this event, I should invoke the following handler function."

In other words, it's a simple publish-subscribe system. Handlers are subscribed to receive events, which we publish to the bus.
It sounds harder than it is, and we usually implement it with a dict

#+BEGIN_SRC python
def handle(event: events.Event):
    for handler in HANDLERS[type(event)]:
        handler(event)

def send_out_of_stock_notification(event: events.OutOfStock):
    email.send_email(
        "stock@lol.example",
        f"Out of stock for {event.sku}"
    )

HANDLERS = {
    events.OutOfStock: [send_out_of_stock_notification]
}  # type: Dict[Type[events.Event], List[Callable]]
#+END_SRC

* Option 1: The Service Layer Takes Events from the Model and Puts Them on the Message Bus

Our domain model raises events, and our message bus will call the right handlers whenever an event happens. Now all we need is to connect the two. We need something to catch events from the model and pass them to the message bus -- the publishing step.

The simplest way to do this is by adding some code into our service layer.

#+BEGIN_SRC python
from . import messagebus

def allocate(orderid: str, sku: str, qty: int, uow: unit_of_work.AbstractUnitOfWork) -> str:
    line = OrderLine(orderid, sku, qty)
    with uow:
        product = uow.products.get(sku=line.sku)
        if product is None:
            raise InvalidSku(f"Invalid sku {line.sku}")
        try:
            batchref = product.allocate(line)
            uow.commit()
            return batchref
        finally:  # 1
            messagebus.handle(product.events)  # 2
#+END_SRC

1. We keep the try/finally from our earlier implementation
2. Instead of depending directly on an email infrastructure, the service layer is just in charge of passing events from the model up to the message bus.

* Option 2: The Service Layer Raises Its Own Events

We could have the service layer in charge of creating and raising events directly, rather than having them raised by the domain model.

#+BEGIN_SRC python
def allocate(orderid: str, sku: str, qty: int, uow: unit_of_work.AbstractUnitOfWork) -> str:
    line = OrderLine(orderid, sku, qty)
    with uow:
        product = uow.products.get(sku=line.sku)
        if product is None:
            raise InvalidSku(f"Invalid sku {line.sku}")
        batchref = product.allocate(line)
        uow.commit()  # 1

        if batchref is None:
            messagebus.handle(events.OutOfStock(line.sku))
        return batchref
#+END_SRC

1. We commit even if we fail to allocate because the code is simpler this way and it's easier to reason about. We always commit unless something goes wrong. Committing when we haven't changed anything is safe and keeps the code uncluttered.

* Option 3: The UoW Publishes Events to the Message Bus
