#+TITLE: Part 1: Building an Architecture to Support Domain Modeling

The first part of the book looks at how to build a rich object model through test driven development, and then we show how to keep that model decoupled from technical concerns. We learn how to build persistence-ignorant code and how to create stable APIs around our domain so that we can refactor aggressively.

We look at 4 key design patterns:

- The Repository Pattern - an abstraction over the idea of persistent storage
- The Service Layer Pattern - Clearly define where our use cases begin and end
- The Unit of Work Pattern - provide atomic operations
- The Aggregate Pattern - enforce the integrity of our data

#+TITLE: Domain Modeling

Here is a specification:

A product is identified by a SKU, pronounced "skew," which is short for stock-keeping unit. Customers place orders. An order is identified by an order reference and comprises multiple order lines, where each line has a SKU and a quantity. For example:

    - 10 units of RED-CHAIR

    - 1 unit of TASTELESS-LAMP

The purchasing department orders small batches of stock. A batch of stock has a unique ID called a reference, a SKU, and a quantity.

We need to allocate order lines to batches. When we’ve allocated an order line to a batch, we will send stock from that specific batch to the customer’s delivery address. When we allocate x units of stock to a batch, the available quantity is reduced by x. For example:

    - We have a batch of 20 SMALL-TABLE, and we allocate an order line for 2 SMALL-TABLE.

    - The batch should have 18 SMALL-TABLE remaining.

We can’t allocate to a batch if the available quantity is less than the quantity of the order line. For example:

    - We have a batch of 1 BLUE-CUSHION, and an order line for 2 BLUE-CUSHION.

    - We should not be able to allocate the line to the batch.

We can’t allocate the same line twice. For example:

    - We have a batch of 10 BLUE-VASE, and we allocate an order line for 2 BLUE-VASE.

    - If we allocate the order line again to the same batch, the batch should still have an available quantity of 8.

Batches have an ETA if they are currently shipping, or they may be in warehouse stock. We allocate to warehouse stock in preference to shipment batches. We allocate to shipment batches in order of which has the earliest ETA.

* Unit Testing Domain Models

Attempt at implementing my own tests up front:

#+BEGIN_SRC python
from datetime import date, timedelta
import pytest

today = date.today()
tomorrow = today + timedelta(days = 1)
later = tomorrow + timedelta(days = 10)

print(today)


def make_batch_and_line(sku, batch_qty, line_qty):
    return (
        Batch("batch-001", sku, batch_qty, eta = date.today()),
        OrderLine("order-123", sku, line_qty)
    )


def can_allocate(self, line: OrderLine) -> bool:
    return self.sku == line.sku and self.available_quantity >= line.qty


# def test_allocating_to_a_batch_reduces_the_available_quantity():
#     batch = Batch(reference = "batch-001",
#                   sku = "SMALL-TABLE",
#                   eta = date.today(),
#                   qty = 20)
#     line = OrderLine(orderid = "order-ref",
#                      sku = "SMALL-TABLE",
#                      qty = 2)

#     batch.allocate(line)

#     assert batch.available_quantity == 18


# mine
# def test_can_allocate_if_available_greater_than_required():
#     batch = Batch(reference = "batch-001",
#                   sku = "SMALL-TABLE",
#                   eta = date.today(),
#                   qty = 20)
#     line = OrderLine(orderid = "order-ref",
#                      sku = "SMALL-TABLE",
#                      qty = 2)

#     assert batch.allocate(line)

# book
def test_can_allocate_if_available_greater_than_required():
    large_batch, small_line = make_batch_and_line("ELEGANT-LAMP", 20, 2)
    assert large_batch.can_allocate(small_line)

# def test_cannot_allocate_if_available_smaller_than_required():
#     batch = Batch(reference = "batch-001",
#                   sku = "SMALL-TABLE",
#                   eta = date.today(),
#                   qty = 20)
#     line = OrderLine(orderid = "order-ref",
#                      sku = "SMALL-TABLE",
#                      qty = 30)

#     assert not batch.allocate(line)

# book
def test_cannot_allocate_if_available_smaller_than_required():
    small_batch, large_line = make_batch_and_line("ELEGANT-LAMP", 2, 20)
    assert small_batch.can_allocate(large_line) is False


# def test_can_allocate_if_available_equal_to_required():
#     batch = Batch(reference = "batch-001",
#                   sku = "SMALL-TABLE",
#                   eta = date.today(),
#                   qty = 20)
#     line = OrderLine(orderid = "order-ref",
#                      sku = "SMALL-TABLE",
#                      qty = 20)

#     assert batch.allocate(line)


# book
def test_can_allocate_if_available_equal_to_required():
    batch, line = make_batch_and_line("ELEGANT-LAMP", 2, 2)
    assert batch.can_allocate(line)
    
    
# def test_cannot_allocate_to_the_same_line_twice():
#     batch = Batch(reference = "batch-001",
#                   sku = "SMALL-TABLE",
#                   eta = date.today(),
#                   qty = 10)
#     line = OrderLine(orderid = "order-ref",
#                      sku = "SMALL-TABLE",
#                      qty = 2)

#     batch.allocate(line)
#     batch.allocate(line)

#     assert batch.quantity_available == 8

# book
def test_cannot_allocate_if_skus_do_not_match():
    batch = Batch("batch-001", "UNCOMFORTABLE-CHAIR", 100, eta = None)
    different_sku_line = OrderLine("order-123", "EXPENSIVE-TOASTER", 10)
    assert batch.can_allocate(different_sku_line) is False

# book
def test_can_only_deallocate_allocated_lines():
    batch, unallocated_line = make_batch_and_line("DECORATIVE-TRINKET", 20, 2)
    batch.deallocate(unallocated_line)
    assert batch.available_quantity == 20

# book
def test_allocation_is_idempotent():
    batch, line = make_batch_and_line("ANGULAR-DESK", 20, 2)
    batch.allocate(line)
    batch.allocate(line)
    assert batch.available_quantity == 18
    
def test_prefers_warehouse_batches_to_shipments():
    pytest.fail("todo")


def test_prefers_earlier_batches():
    pytest.fail("todo")

#+END_SRC

#+BEGIN_SRC python
# the domain model that meets our requirements
from dataclasses import dataclass
from typing import Optional

# orderline is an immutable dataclass with no behavior
@dataclass(frozen = True)
class OrderLine:
    orderid: str
    sku: str
    qty: int

class Batch:
    def __init__(self, ref: str, sku: str, qty: int, eta: Optional[date]):
        self.reference = ref
        self.sku = sku
        self.eta = eta
        self.available_quantity = qty

    def allocate(self, line: OrderLine):
        self.available_quantity -= line.qty

# updated to handle deallocation
class Batch:
    def __init__(self, ref: str, sku: str, qty: int, eta: Optional[date]):
        self.reference = ref
        self.sku = sku
        self.eta = eta
        self._purchased_quantity = qty
        self._allocations = set() # type: Set[OrderLine]

    def allocate(self, line: OrderLine):
        if self.can_allocate(line):
            self._allocations.add(line)

    def deallocate(self, line: OrderLine):
        if line in self._allocations:
            self._allocations.remove(line)

    @property
    def allocated_quantity(self) -> int:
        return sum(line.qty for line in self._allocations)

    @property
    def available_quantity(self) -> int:
        return self._purchased_quantity - self.allocated_quantity

    def can_allocate(self, line: OrderLine) -> bool:
        return self.sku == line.sku and self.available_quantity >= line.qty

#+END_SRC

** More Types for More Type Hints

#+BEGIN_SRC python
from dataclasses import dataclass
from typing import NewType

Quantity = NewType("Quantity", int)
Sku = NewType("Sku", str)
Reference = NewType("Reference", str)

# ...

class Batch:
    def __init__(self, ref: Reference, sku: Sku, qty: Quantity):
        self.sku = sku
        self.reference = ref
        self._purchased_quantity = qty
#+END_SRC

* Dataclasses are great for Value Objects

Whenever we have a business concept that has data but no identity, we often choose to represent it using the Value Object pattern. A value object is any domain object that is uniquely identified by the data it holds; we usually make them immutable:

#+BEGIN_SRC python
# OrderLine is a value object
@dataclass(frozen = True)
class OrderLine:
    orderid: OrderReference
    sku: ProductReference
    qty: Quantity
#+END_SRC

dataclasses give us value equality, i.e. two lines with the same orderid, sku and qty are equal

#+BEGIN_SRC python
from dataclasses import dataclass
from typing import NamedTuple
from collections import namedtuple


@dataclass(frozen = True)
class Name:
    first_name: str
    surname: str

    
class Money(NamedTuple):
    currency: str
    value: int

    
Line = namedtuple('Line', ['sku', 'qty'])


def test_equality():
    assert Money('gbp', 10) == Money('gbp', 10)
    assert Name('Harry', 'Percival') != Name('Bob', 'Gregory')
    assert Line('RED-CHAIR', 5) == Line('RED-CHAIR', 5)

print(test_equality())
#+END_SRC

#+BEGIN_SRC python
# add mathematical operators
fiver = Money('gbp', 5)
tenner = Money('gbp', 10)


def can_add_money_values_for_the_same_currency():
    assert fiver + fiver == tenner

    
def can_subtract_money_values():
    return assert tenner - fiver == fiver


def adding_different_currencies_fails():
    with pytest.raises(ValueError):
        Money('usd', 10) + Money('gbp', 10)


def can_multiply_money_by_a_number():
    assert fiver * 5 == Money('gbp', 25)


def multiplying_two_values_is_an_error():
    with pytest.raises(TypeError):
        tenner * fiver
#+END_SRC

To get the tests above to pass, we need to implement some magic methods on our Money class:

#+BEGIN_SRC python
@dataclass(frozen = True)
class Money:
    currency: str
    value: int

    def __add__(self, other) -> Money:
        if other.currency != self.currency:
            raise ValueError(f"Cannot add {self.currency} to {other.currency}")
        return Money(self.currency, self.value + other.value)

    def __sub__(self, others) -> Money:
        if other.currency != self.currency:
            raise ValueError(f"Cannot add {self.currency} to {other.currency}")
        return Money(self.currency, self.value - other.value)

    def __mult__(self, others) -> Money:
        raise TypeError(f"Cannot multiply currency")
#+END_SRC

* Value Objects and Entities

We use the term entity to describe a domain object that has a long lived identity. 
  
#+BEGIN_SRC python
def test_name_equality():
    assert Name("Harry", "Percival") != Name("Barry", "Percival")

# humans have a persistent identity regardless of descriptors
class Person:
    def __init__(self, name: Name):
        self.name = name

def test_barry_is_harry():
    harry, barry = Person(Name("Harry", "Percival")), harry
    barry.name = Name("Barry", "Percival")

    assert harry is barry and barry is harry
#+END_SRC

Entities, unlike values, have identity equality. We can change their values, but they are recognizably the same thing
We can make this explicit by implementing equality operators on entities:

#+BEGIN_SRC python
class Batch:
    # ...
    # defines behavior of the class for the == operator
    def __eq__(self, other):
        if not ininstance(other, Batch):
            return False
        return other.reference == self.reference

    # defines the behavior Python uses when adding the obj to sets or using them as dict keys
    def __hash__(self):
        return hash(self.reference)
#+END_SRC

