#+TITLE: A Brief Interlude: On Coupling and Abstractions

A key theme in this book is that we can use simple abstractions to hide messy details.
When we're unable to change component A for fear of breaking component B, we say the components have become coupled.
We can reduce the degree of coupling within a system by abstracting away the details.


#+DOWNLOADED: /tmp/screenshot.png @ 2021-07-08 08:35:10
[[file:screenshot_2021-07-08_08-35-10.png]]

* Abstracting State Aids Testability

Let's say we want to write code for synchronizing two file directories, a source and a destination.

- If a file exists in the source but not the destination copy the file over
- If a file exists in the source, but it has a different name than in the destination, rename the destination file to match
- If a file exists in the destination but not in the source, remove it

To detect renames we'll have to inspect the content of the files. For this, we can use a hashing function like MD5 or SHA-1.

#+BEGIN_SRC python :tangle sync.py
import hashlib
import os
import shutil
from pathlib import Path


BLOCKSIZE = 65536


def hash_file(path):
    hasher = hashlib.sha1()
    with path.open("rb") as file:
        buf = file.read(BLOCKSIZE)
        while buf:
            hasher.update(buf)
            buf = file.read(BLOCKSIZE)
    return hasher.hexdigest()


def sync(source, dest):
    # Walk the source folder and build a dict of filenames and their hashes
    source_hashes = {}
    for folder, _, files in os.walk(source):
        for fn in files:
            source_hashes[hash_file(Path(folder) / fn)] = fn

    seen = set()  # Keep track of the files we've found in the target

    # Walk the target folder and get the filenames and hashes
    for folder, _, files in os.walk(dest):
        for fn in files:
            dest_path = Path(folder) / fn
            dest_hash = hash_file(dest_path)
            seen.add(dest_hash)

            # if there's a file in target that's not in source, delete it
            if dest_hash not in source_hashes:
                dest_path.remove()

            # if there's a file in target that has a different path in source
            # move it to the correct path
            elif dest_hash in source_hashes and fn != source_hashes[dest_hash]:
                shutil.move(dest_path, Path(folder) / source_hashes[dest_hash])

    # for every file that appears in the source, but not the target, copy the file to target
    for src_hash, fn in source_hashes.items():
        if src_hash not in seen:
            shutil.copy(Path(source) / fn, Path(dest) / fn)
#+END_SRC

#+BEGIN_SRC python :tangle test_sync.py
import tempfile
from pathlib import Path
import shutil
from sync import sync


def test_when_a_file_exists_in_the_source_but_not_the_destination():
    try:
        source = tempfile.mkdtemp()
        dest = tempfile.mkdtemp()

        content = "I am a very useful file"
        (Path(source) / "my-file").write_text(content)

        sync(source, dest)

        expected_path = Path(dest) / "my-file"
        assert expected_path.exists()
        assert expected_path.read_text() == content

    finally:
        shutil.rmtree(source)
        shutil.rmtree(dest)


def test_when_a_file_has_been_renamed_in_the_source():
    try:
        source = tempfile.mkdtemp()
        dest = tempfile.mkdtemp()

        content = "I am a file that was renamed"
        source_path = Path(source) / "source-filename"
        old_dest_path = Path(dest) / "dest-filename"
        expected_dest_path = Path(dest) / "source-filename"
        source_path.write_text(content)
        old_dest_path.write_text(content)

        sync(source, dest)

        assert old_dest_path.exists() is False
        assert expected_dest_path.read_text() == content

    finally:
        shutil.rmtree(source)
        shutil.rmtree(dest)
#+END_SRC

* Choosing the Right Abstractions

What could we do to rewrite our code to make it more testable?

First we need to think about what our code needs from the filesystem. There are 3 distinct reponsibilities that the code has:

1. We use os.walk to check the filesystem and determine hashes for a series of paths.
2. We decide whether a file is new, renamed, or redundant
3. We copy, move, or delete files to match the source

We want to find _simplifying abstractions_ for each of these responsibilities.

For steps 1 and 2, we could use a dictionary for the destination folder and the source, and then just compare the two dicts.

#+BEGIN_SRC python
source_files = {'hash1': 'path1', 'hash2': 'path2'}
dest_files = {'hash1': 'path1', 'hash2': 'pathX'}
#+END_SRC

For moving from step 2 to step 3, we can apply a trick. We're going to separate what we want to do from how to do it.

#+BEGIN_SRC python
('COPY', 'sourcepath', 'destpath')
('MOVE', 'old', 'new')
#+END_SRC

Now we could write tests that just use two filesystem dicts as inputs, and we would expect lists of tuples of strings representing actions as outputs.

Instead of saying "Given this actual filesystem, when I run my function, check what actions have happened", we say "Given this abstraction of a filesystem, what abstraction of filesystem actions will happen?"

#+BEGIN_SRC python
def test_when_a_file_exists_in_the_source_but_not_the_destination():
    src_hashes = {'hash1': 'fn1'}
    dst_hashes = {}
    expected_actions = [('COPY', '/src/fn1', '/dst/fn1')]
    # ...

def test_when_a_file_has_been_renamed_in_the_source():
    src_hashes = {'hash1': 'fn1'}
    dst_hashes = {'hash1': 'fn2'}
    expected_actions = [('MOVE', '/dst/fn2', '/dst/fn1')]
    # ...
#+END_SRC

* Implementing Our Chosen Abstractions

Our goal is to isolate the clever part of our system, and to be able to test it thoroughly without needing to set up a real filesystem.
We'll create a "core" of code that has no dependencies on external state and then see how it responds when we give it input from the outside world.

Let's start off by splitting the code to separate the stateful parts from the logic.

#+BEGIN_SRC python :tangle sync.py
import hashlib
import os
import shutil
from pathlib import Path


BLOCKSIZE = 65536


def hash_file(path):
    hasher = hashlib.sha1()
    with path.open("rb") as file:
        buf = file.read(BLOCKSIZE)
        while buf:
            hasher.update(buf)
            buf = file.read(BLOCKSIZE)
    return hasher.hexdigest()


def read_paths_and_hashes(root):
    '''Gathers inputs from a filesystem'''
    hashes = {}
    for folder, _, files in os.walk(root):
        for fn in files:
            hashes[hash_file(Path(folder) / fn)] = fn
    return hashes


def determine_actions(src_hashes, dst_hashes, src_folder, dst_folder):
    '''
    The functional core. Controls the dispatch of file operations.
    This _just_ does business logic
    '''
    for sha, filename in src_hashes.items():
        if sha not in dst_hashes:
            sourcepath = Path(src_folder) / filename
            destpath = Path(dst_folder) / filename
            yield "copy", sourcepath, destpath

        elif dst_hashes[sha] != filename:
            olddestpath = Path(dst_folder) / dst_hashes[sha]
            newdestpath = Path(dst_folder) / filename
            yield "move", olddestpath, newdestpath

    for sha, filename in dst_hashes.items():
        if sha not in src_hashes:
            yield "delete", dst_folder / filename


def sync(source, dest):
    # imperative shell step 1, gather inputs
    source_hashes = read_paths_and_hashes(source)
    dest_hashes = read_paths_and_hashes(dest)

    # step 2: call functional core
    actions = determine_actions(source_hashes, dest_hashes, source, dest)

    # imperative shell step 2, apply outputs
    for action, *paths in actions:
        if action == "copy":
            shutil.copyfile(*paths)
        if action == "move":
            shutil.move(*paths)
        if action == "delete":
            os.remove(paths[0])
#+END_SRC

#+BEGIN_SRC python :tangle test_sync.py
def test_when_a_file_exists_in_the_source_but_not_the_destination():
    src_hashes = {"hash1": "fn1"}
    dst_hashes = {}
    actions = determine_actions(src_hashes, dst_hashes, Path("/src"), Path("/dst"))
    assert list(actions) == [("move", Path("/dst/fn2"), Path("/dst/fn1"))]

def test_when_a_file_has_been_renamed_in_the_source():
    src_hashes = {"hash1": "fn1"}
    dst_hashes = {"hash2": "fn2"}
    actions = determine_actions(src_hashes, dst_hashes, Path("/src"), Path("/dst"))
    assert list(actions) == [("move", Path("/dst/fn2"), Path("/dst/fn1"))]
#+END_SRC

With this approach, we've switched from testing our main entrypoint function, sync(), to testing a lower-level function, determine_actions().
That might be fine because sync is so simple. There is another option, which is to modify the sync() function so it can be unit tested and
end to end tested.

* Testing Edge to Edge with Fakes and Dependency Injection

When we start writing a new system, we often focus on the core logic first, driving it with unit tests. At some point, we want to test bigger chunks of the system together. We could write end to end tests, but those are tricky to write and maintain.
Instead we often write tests that invoke a whole system together, but fake the I/O, sort of edge to edge:

#+BEGIN_SRC python
# use dependency injection to fake the filesystem and the reader
def sync(reader, filesystem, source_root, dest_root):
    source_hashes = reader(source_root)
    dest_hashes = reader(dest_root)

    for sha, filename in src_hashes.items():
        if sha not in dest_hashes:
            sourcepath = source_root / filename
            destpath = dest_root / filename
            filesystem.copy(destpath, sourcepath)

        elif dest_hashes[sha] != filename:
            olddestpath = dest_root / dst_hashes[sha]
            newdestpath = dest_root / filename
            filesystem.move(olddestpath, newdestpath)

    for sha, filename in dest_hashes.items():
        if sha not in src_hashes:
            filesystem.delete(dest_root / filename)
#+END_SRC

#+BEGIN_SRC python
# tests using Dependency Injection
class FakeFileSystem(list):
    def copy(self, src, dest):
        self.append(('COPY', src, dest))

    def move(self, src, dest):
        self.append(('MOVE', src, dest))

    def delete(self, src, dest):
        self.append(('DELETE', src, dest))

def test_when_a_file_exists_in_the_source_but_not_the_destination():
    source = {"sha1": "my-file"}
    dest = {}
    filesystem = FakeFileSystem()
    reader = {"/source": source, "/dest": dest}
    sync(reader.pop, filesystem, "/source", "/dest")
    assert filesystem == [("COPY", "/source/my-file", "/dest/my-file")]

def test_when_a_file_has_been_renamed_in_the_source():
    source = {"sha1": "renamed-file"}
    dest = {"sha1": "original-file"}
    filesystem = FakeFileSystem()
    reader = {"/source": source, "/dest": dest}
    sync(reader.pop, filesystem, "/source", "/dest")
    assert filesystem == [("MOVE", "/dest/original-file", "/dest/renamed-file")]
#+END_SRC

The advantage of this approach is that our tests act on the exact same function that's used by our production code.  The disadvantage is that we have to make our stateful components explicit and pass them around.

* Wrap-Up

We can make our systems easier to test and maintain by simplifying the interface between our business logic and messy I/O.
Finding the right abstraction is tricky, but here are a few heuristics and questions to ask yourself:

- Can I choose a familiar python data structure to represent the state of the messy system and then try to imagine a single function that can return that state?
- Where can I draw the line between my systems, where can I carve out a seam to stick that abstraction in?
- What is a sensible way of dividng things into components with different responsibilities? What implicit concepts can I make explicit?
- What are the dependencies, and what is the core business logic?
